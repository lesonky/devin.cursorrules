# Core Rules
These rules MUST be followed in every conversation:

1. Project Organization
   - Create project under `projects/` with descriptive name
   - Initialize `scratchpad.md` for task tracking
   - Maintain proper file structure
   - Document all outputs in markdown

2. Task Documentation
   - Use `YYYY-MM-DD_task_name_report.md` format
   - Include all standard sections
   - Add code snippets, metrics, and visuals
   - Document issues and solutions

3. Quality Standards
   - Write debug info to stderr
   - Handle character encodings (UTF-8)
   - Follow consistent formatting
   - Cite sources with markdown links

# Available Tools
Note: All tools are in Python. For batch processing, consult the tool source files.

## Core Tools
1. LLM API (`tools/llm_api.py`)
   - Providers: OpenAI, Anthropic, Gemini
   - Use for text understanding and generation
   - Test on few files before batch processing

2. Web Tools
   - Web scraper (`tools/web_scraper.py`)
   - Search engine (`tools/search_engine.py`)
   - Screenshot utils (`tools/screenshot_utils.py`)

3. Data Tools
   - SQLite database (`tools/sqlite_tool.py`)
   - YouTube processing (`tools/youtube_tool.py`)
   - Calendar management (`tools/calendar_tool.py`)

# Best Practices

## Data Visualization
- Use LXGW WenKai Mono for CJK
- Set fonts globally:
  ```python
  plt.rcParams['font.sans-serif'] = ['LXGW WenKai Mono']
  mpl.rcParams['font.family'] = 'LXGW WenKai Mono'
  ```
- Use seaborn-v0_8 style
- Set dpi=300 for high quality

## Tool-specific Guidelines
1. Calendar Tool
   - Use "Home" calendar on macOS
   - Add error handling in AppleScript
   - Return user language errors

2. Video Processing
   - Follow workflow in video_summary_workflow.md
   - Preserve metadata and transcripts
   - Use structured format for summaries

3. Cloud Integration
   - Use workload identity federation
   - Configure GCP first, then AWS
   - Follow least privilege principle
   - Enable audit logging

# Lessons Learned
Maintain this section for new lessons and corrections:

1. File Management
   - Use correct relative paths
   - Create directories before saving files
   - Keep raw and processed data separate

2. Output Handling
   - Avoid mixing output formats
   - Use UTF-8 encoding
   - Add debug information to stderr

3. Documentation
   - Follow markdown standards
   - Include reproducible examples
   - Document error solutions
   - Keep configuration files reusable

Note: This file is maintained in English only.

# Instructions

During you interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.cursorrules` file so you will not make the same mistake again. 

For each task, you should maintain a scratchpad in the corresponding project's `scratchpad.md` file to organize your thoughts. When you receive a new task:
1. Create a new project directory with a descriptive name under the `projects` folder
2. Initialize a `scratchpad.md` file in the project directory
3. First explain the task and plan the steps you need to take to complete it
4. Use todo markers to track progress, e.g.
   [X] Task 1
   [ ] Task 2
5. Update the progress in the scratchpad when you finish a subtask
6. When reaching a milestone, use the scratchpad to reflect and plan next steps

The goal is to help you maintain a big picture as well as track the progress of each task. Always refer to the task's scratchpad when planning next steps.

# Project Organization

All task-related files and outputs should be organized in the following structure:
1. A `projects` folder exists in the root directory
2. For each new task, create a dedicated subfolder under `projects` with a descriptive name that reflects the task's purpose
3. Each project subfolder should contain:
   - A `scratchpad.md` file for tracking task progress and planning
   - All files, outputs, and artifacts related to the specific task
   - Any additional documentation needed for the task

This organization helps maintain a clean workspace, makes it easy to track deliverables for each task, and ensures all task-related information is properly documented and accessible.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## Screenshot Verification
The screenshot verification workflow allows you to capture screenshots of web pages and verify their appearance using LLMs. The following tools are available:

1. Screenshot Capture:
```bash
venv/bin/python tools/screenshot_utils.py URL [--output OUTPUT] [--width WIDTH] [--height HEIGHT]
```

2. LLM Verification with Images:
```bash
venv/bin/python tools/llm_api.py --prompt "Your verification question" --provider {openai|anthropic} --image path/to/screenshot.png
```

Example workflow:
```python
from screenshot_utils import take_screenshot_sync
from llm_api import query_llm

# Take a screenshot
screenshot_path = take_screenshot_sync('https://example.com', 'screenshot.png')

# Verify with LLM
response = query_llm(
    "What is the background color and title of this webpage?",
    provider="openai",  # or "anthropic"
    image_path=screenshot_path
)
print(response)
```

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
# Assuming your project folder is 'projects/translation_task'
venv/bin/python ./tools/llm_api.py \
  --prompt "What is the capital of France?" \
  --provider "anthropic" \
  --output "projects/translation_task/outputs/france_capital.txt"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
# Assuming your project folder is 'projects/web_research'
venv/bin/python ./tools/web_scraper.py \
  --max-concurrent 3 \
  --output-dir "projects/web_research/data" \
  URL1 URL2 URL3
```
This will output the content of the web pages to your project's data directory.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## SQLite Database

You could use the `tools/sqlite_tool.py` file to perform SQLite database operations. This tool provides comprehensive database management capabilities including:

1. Execute SQL Query:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --query "SELECT * FROM users"
```

2. Execute SQL Script File:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --script script.sql
```

3. Import CSV Data:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --import-csv data.csv --table users
```

4. Export Query Results to CSV:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --query "SELECT * FROM users" --export-csv output.csv
```

Key Features:
- Automatic database directory creation
- Parameterized queries for SQL injection prevention
- Comprehensive error handling and logging
- Full UTF-8 encoding support
- CSV data import/export capabilities

## YouTube Tool

You can use the `tools/youtube_tool.py` file to process YouTube video transcripts and content analysis. Main features include:

1. Extract video transcript:
```bash
venv/bin/python tools/youtube_tool.py "https://www.youtube.com/watch?v=VIDEO_ID" --output "projects/your_project/data/transcript.txt"
```

2. Generate content summary:
```bash
venv/bin/python tools/youtube_tool.py "https://www.youtube.com/watch?v=VIDEO_ID" --summarize --output "projects/your_project/data/summary.txt"
```

Key Features:
- Support for multiple YouTube URL formats
- Automatic transcript extraction and formatting
- Content summarization using LLM
- Comprehensive error handling and logging
- Full UTF-8 encoding support

## Calendar Tool

You can use the `tools/calendar_tool.py` file to create system calendar events. Main features include:

1. Create a new calendar event:
```bash
venv/bin/python tools/calendar_tool.py \
  --title "Meeting with Team" \
  --start "2024-03-20T14:00:00" \
  --end "2024-03-20T15:00:00" \
  --description "Weekly team sync" \
  --location "Conference Room A"
```

2. List available calendars:
```bash
venv/bin/python tools/calendar_tool.py --list-calendars
```

Key Features:
- Integration with system Calendar app
- Support for multiple calendars
- Flexible datetime format support
- Comprehensive error handling and logging
- Full UTF-8 encoding support for international text

# Lessons

## User Specified Lessons
- You have a python venv in ./venv.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.
- When adding new tools, update the .cursorrules file accordingly.
- keep the .cursorrules file in English only.
- For video summary tasks, follow the standard workflow in video_summary_workflow.md:
  1. Create proper project structure with data directory
  2. Extract transcript and generate initial summary using youtube_tool.py
  3. Organize content in a structured format:
     - Basic information (type, context, participants, time/location)
     - Content analysis (core topics, categorized content, key points)
     - Supplementary information
  4. Follow markdown formatting standards for consistency
  5. Use quality checklist to ensure completeness
  6. Keep both raw data and processed summaries for reference

## Cursor learned
- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- When exporting data, avoid mixing different output formats (e.g., JSON and CSV) in the same operation to prevent confusion
- When processing video content, preserve original metadata (title, duration, channel, etc) and raw transcript alongside the summary to allow users to analyze from different perspectives
- When summarizing search results, always cite sources with markdown links (e.g., `[Official Website](https://example.com)`) to maintain document formatting consistency while providing verifiable references
- Document all task outputs in markdown format following these guidelines:
  - Use a consistent file naming convention: `YYYY-MM-DD_task_name_report.md`
  - Include standard sections:
    - Task Overview and Requirements
    - Methodology and Approach
    - Results and Analysis
    - Conclusions and Recommendations
    - References and Resources Used
  - Add relevant code snippets with proper syntax highlighting
  - Include performance metrics and benchmarks where applicable
  - Document any issues encountered and their solutions
  - Use tables and lists for better readability
  - Add screenshots or diagrams when helpful

## Font Settings for Data Visualization
- Use LXGW WenKai Mono for CJK characters in matplotlib/seaborn plots
- Set fonts globally before creating plots:
  ```python
  plt.rcParams['font.sans-serif'] = ['LXGW WenKai Mono']
  mpl.rcParams['font.family'] = 'LXGW WenKai Mono'
  ```
- For seaborn heatmaps, set fonts via ax object instead of plt
- Provide fallback fonts: Microsoft YaHei, SimHei, PingFang SC
- Use tight_layout() and bbox_inches='tight' to prevent text cutoff
- Set dpi=300 for high-quality output

## Calendar Tool Lessons
- Default calendar should be "Home" instead of "Calendar" on macOS
- Always add error handling in AppleScript with try/on error blocks
- Check calendar existence before creating events
- Add detailed debug information for troubleshooting
- Handle special characters and quotes in calendar names properly
- Return meaningful error messages in the user's language

# Scratchpad
