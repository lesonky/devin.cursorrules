# Instructions

During your interaction with the user, if you find anything reusable in this project (e.g. version of a library, model name), especially about a fix to a mistake you made or a correction you received, you should take note in the `Lessons` section in the `.trearules` file so you will not make the same mistake again.

For each task, you should maintain a scratchpad in the corresponding project's `scratchpad.md` file to organize your thoughts. When you receive a new task:
1. Create a new project directory with a descriptive name under the `projects` folder
2. Initialize a `scratchpad.md` file in the project directory
3. First explain the task and plan the steps you need to take to complete it
4. Use todo markers to track progress, e.g.
   [X] Task 1
   [ ] Task 2
5. Update the progress in the scratchpad when you finish a subtask
6. When reaching a milestone, use the scratchpad to reflect and plan next steps

The goal is to help you maintain a big picture as well as track the progress of each task. Always refer to the task's scratchpad when planning next steps.

# Project Organization

All task-related files and outputs should be organized in the following structure:
1. A `projects` folder exists in the root directory
2. For each new task, create a dedicated subfolder under `projects` with a descriptive name that reflects the task's purpose
3. Each project subfolder should contain:
   - A `scratchpad.md` file for tracking task progress and planning
   - All files, outputs, and artifacts related to the specific task
   - Any additional documentation needed for the task

This organization helps maintain a clean workspace, makes it easy to track deliverables for each task, and ensures all task-related information is properly documented and accessible.

# Tools

Note all the tools are in python. So in the case you need to do batch processing, you can always consult the python files and write your own script.

## LLM

You always have an LLM at your side to help you with the task. For simple tasks, you could invoke the LLM by running the following command:
```
# Assuming your project folder is 'projects/translation_task'
venv/bin/python ./tools/llm_api.py \
  --prompt "What is the capital of France?" \
  --provider "anthropic" \
  --output "projects/translation_task/outputs/france_capital.txt"
```

The LLM API supports multiple providers:
- OpenAI (default, model: gpt-4o)
- Anthropic (model: claude-3-sonnet-20240229)
- Gemini (model: gemini-pro)

But usually it's a better idea to check the content of the file and use the APIs in the `tools/llm_api.py` file to invoke the LLM if needed.

## Web browser

You could use the `tools/web_scraper.py` file to scrape the web.
```
# Assuming your project folder is 'projects/web_research'
venv/bin/python ./tools/web_scraper.py \
  --max-concurrent 3 \
  --output-dir "projects/web_research/data" \
  URL1 URL2 URL3
```
This will output the content of the web pages to your project's data directory.

## Search engine

You could use the `tools/search_engine.py` file to search the web.
```
venv/bin/python ./tools/search_engine.py "your search keywords"
```
This will output the search results in the following format:
```
URL: https://example.com
Title: This is the title of the search result
Snippet: This is a snippet of the search result
```
If needed, you can further use the `web_scraper.py` file to scrape the web page content.

## SQLite Database

You could use the `tools/sqlite_tool.py` file to perform SQLite database operations. This tool provides comprehensive database management capabilities including:

1. Execute SQL Query:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --query "SELECT * FROM users"
```

2. Execute SQL Script File:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --script script.sql
```

3. Import CSV Data:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --import-csv data.csv --table users
```

4. Export Query Results to CSV:
```bash
venv/bin/python tools/sqlite_tool.py --db data.db --query "SELECT * FROM users" --export-csv output.csv
```

Key Features:
- Automatic database directory creation
- Parameterized queries for SQL injection prevention
- Comprehensive error handling and logging
- Full UTF-8 encoding support
- CSV data import/export capabilities

# Lessons

## User Specified Lessons

- You have a python venv in ./venv.
- Include info useful for debugging in the program output.
- Read the file before you try to edit it.
- Use LLM to perform flexible text understanding tasks. First test on a few files. After success, make it parallel.
- When adding new tools, update the .trearules file accordingly and keep it in English only.

## Trea learned

- For website image paths, always use the correct relative path (e.g., 'images/filename.png') and ensure the images directory exists
- For search results, ensure proper handling of different character encodings (UTF-8) for international queries
- Add debug information to stderr while keeping the main output clean in stdout for better pipeline integration
- When using seaborn styles in matplotlib, use 'seaborn-v0_8' instead of 'seaborn' as the style name due to recent seaborn version changes
- When exporting data, avoid mixing different output formats (e.g., JSON and CSV) in the same operation to prevent confusion

# Scratchpad